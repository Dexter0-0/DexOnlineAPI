#------------------------------------------------------------------------#

1. NumarCuvintePrefix:

  * PARAMETRII:
    Prefixul

  * RETURN:
    Un int cu numarul de cuvinte din limba romana ce incep cu acel prefix

  * FUNCTIA:
    def NumarCuvintePrefix(Prefix):
        //Ia prefixul si alcatuieste linkul paginii
        PrefixPage = "https://dexonline.net/cuvinte-care-incep-cu-" + Prefix
      
        //Ia Tree-ul paginii si returneaza numarul de linkuri de pe pagina - 13 (13 e numarul de linkuri de la reclame alte pagini etc) 
        Tree = html.fromstring(requests.get(PrefixPage).content)
        return int(Tree.xpath('count(//a)') - 13)

#------------------------------------------------------------------------#

2. NumarCuvinteSufix:

  * PARAMETRII:
    Sufixul

  * RETURN:
    Un int cu numarul de cuvinte din limba romana ce incep cu acel sufix

  * FUNCTIA:
    def NumarCuvinteSufix(Sufix):
        //Ia sufixul si alcatuieste linkul paginii
        SufixPage = "https://dexonline.net/cuvinte-care-se-termina-cu-" + Sufix
        
        //Ia Tree-ul paginii si returneaza numarul de linkuri de pe pagina - 13 (13 e numarul de linkuri de la reclame alte pagini etc) 
        Tree = html.fromstring(requests.get(SufixPage).content)
        return int(Tree.xpath('count(//a)') - 13)

#------------------------------------------------------------------------#

3. NumarCuvinteRima:
  
  * PARAMETRII:
    Cuvantul
    GradulRimei (optional)
    
  * RETURN:
    Un int cu numarul de cuvinte din limba romana ce au rima de gradul precizat cu acel cuvant 

  * FUNCTIA:
    def NumarCuvinteRima(Cuvant, GradulRimei = 1):
        //Ia Cuvantul si GradulRimei si alcatuieste linkul paginii
        RhymePage = "https://dexonline.net/rime-" + Cuvant + "-gradul-" + str(GradulRimei)
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(RhymePage).content)
        
        //Ia textul unui element cu numarul de cuvinte dar uneori si daca nu exista cuvinte elementul tot are o valoare asa ca 
        //verifica si numarul de linkuri de pe pagina sa se asigure ca numarul e bun (43 e nr de linkuri de pe site ale reclamelor 
        //sau a altor chestii)
        if int(Tree.xpath('count(//a)') - 43) <= 0:
            return 0
        
        //Scoate virgulele si parantezele din textul cu numarul
        return int(Tree.xpath('//html/body/div/div[2]/h3/span/text()')[0].replace("(","").replace(")",""))

#------------------------------------------------------------------------#

4. NumarCuvinteSinonim:

  * PARAMETRII:
    Cuvantul

  * RETURN:
    Un int cu numarul de cuvinte din limba romana care sunt sinonime cu cuvantul

  * FUNCTIA:
    def NumarCuvinteSinonim(Cuvant):
        //Ia Cuvantul si alcatuieste linkul paginii
        SynonymousPage = "https://dexonline.net/sinonime-" + Cuvant
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(SynonymousPage).content)
        
        //Numarul de sinonime e egal cu numarul de elemente ale elementului de mai jos + 1
        SynonymousNumber = len(Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/text()')) + 1

        //Daca este unu inseamna ca defapt nu era nici un element asa ca nu sunt sinonime
        if SynonymousNumber <= 1:
            return 0
        return SynonymousNumber

#------------------------------------------------------------------------#

5. NumarCuvinteAntonim:

  * PARAMETRII:
    Cuvantul

  * RETURN:
    Un int cu numarul de cuvinte din limba romana care sunt antonime cu cuvantul

  * FUNCTIA:
    def NumarCuvinteAntonime(Cuvant):
        //Ia Cuvantul si alcatuieste linkul paginii
        AntonymousPage = "https://dexonline.net/sinonime-" + Cuvant
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(AntonymousPage).content)
        
        //Numarul de antonime e egal cu numarul de elemente ale elementului de mai jos + 1
        AntonymousNumber = len(Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/text()')) + 1
  
        //Daca este unu inseamna ca defapt nu era nici un element asa ca nu sunt sinonime
        if AntonymousNumber <= 1:
            return 0
        return AntonymousNumber

#------------------------------------------------------------------------#

6. CuvintePrefix:

  * PARAMETRII:
    Cuvantul
    NumarCuvinte (optional)

  * RETURN:
    Un array/list cu toate cuvintele din limba romana/numarul precizat de cuvinte care au acel prefix
    
  * FUNCTIA:
    def CuvintePrefix(Prefix, NumarCuvinte = 0):
        //Ia Prefixul si alcatuieste linkul paginii
        PrefixPage = "https://dexonline.net/cuvinte-care-incep-cu-" + str(Prefix)
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(PrefixPage).content)
        
        //Initializeaza arrayul
        Words = []
        
        //Ia numarul de pagini cu cuvinte
        PageNumber = len(Tree.xpath('/html/body/div/ul/li'))
        
        //Daca nu exista elementul inseamna ca este o singura pagina
        if PageNumber == 0:
            PageNumber = 1
        
        //Trece prin toate paginile
        for Page in range(1, PageNumber + 1):
            //Alcatuieste noul link cu numarul paginii in el
            Tree = html.fromstring(requests.get(PrefixPage + '/' + str(Page)).content)
            
            //Trece prin fiecare coloana
            for Row in range(1, len(Tree.xpath('/html/body/div/div[3]/div/div'))):
                //Trece prin fiecare element
                for Word in range(1, len(Tree.xpath('/html/body/div/div[3]/div/div[' + str(Row) + ']/a/text()')) + 1):
                    //Atribuie cuvantul arrayului si scoate parantezele si ghilimelele din text
                    Words.append((str(Tree.xpath('/html/body/div/div[3]/div/div[' + str(Row) + ']/a[' + str(Word) + ']/text()')).replace("                       [", "").replace("]", "").replace("'", "")))
                    
                    //Verifica daca a fost atins numarul de cuvinte precizat
                    if NumarCuvinte != 0 and len(Words) == NumarCuvinte:
                        return Words
          return Words

#------------------------------------------------------------------------#

7. CuvinteSufix:

  * PARAMETRII:
    Cuvantul
    NumarCuvinte (optional)

  * RETURN:
    Un array/list cu toate cuvintele din limba romana/numarul precizat de cuvinte care au acel sufix
    
  * FUNCTIA:
    def CuvinteSufix(Sufix, NumarCuvinte = 0):
        //Ia Sufixul si alcatuieste linkul paginii
        SufixPage = "https://dexonline.net/cuvinte-care-se-termina-cu-" + str(Sufix)
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(SufixPage).content)
        
        //Initializeaza arrayul
        Words = []
      
        //Ia numarul de pagini cu cuvinte
        PageNumber = len(Tree.xpath('/html/body/div/ul/li'))
        
        //Daca nu exista elementul inseamna ca este o singura pagina
        if PageNumber == 0:
            PageNumber = 1
        
        //Trece prin toate paginile
        for Page in range(1, PageNumber + 1):
            //Alcatuieste noul link cu numarul paginii in el
            Tree = html.fromstring(requests.get(SufixPage + '/' + str(Page)).content)
            
            //Trece prin fiecare coloana
            for Row in range(1, len(Tree.xpath('/html/body/div/div[3]/div/div'))):
                //Trece prin fiecare element
                for Word in range(1, len(Tree.xpath('/html/body/div/div[3]/div/div[' + str(Row) + ']/a/text()')) + 1):
                    //Atribuie cuvantul arrayului si scoate parantezele si ghilimelele din text
                    Words.append((str(Tree.xpath('/html/body/div/div[3]/div/div[' + str(Row) + ']/a[' + str(Word) + ']/text()')).replace("                       [", "").replace("]", "").replace("'", "")))
                    
                    //Verifica daca a fost atins numarul de cuvinte precizat
                    if NumarCuvinte != 0 and len(Words) == NumarCuvinte:
                        return Words
         return Words

#------------------------------------------------------------------------#

8. CuvinteRima:

  * PARAMETRII:
    Cuvantul
    NumarCuvinte (optional)
    GradulRimei (optional)
    
  * RETURN:
    Un array/list cu toate cuvintele din limba romana/numarul precizat de cuvinte care au o rima de gradul precizat cu cuvantul
    
  * FUNCTIA:
    def CuvinteRima(Cuvant, GradulRimei = 1, NumarCuvinte = 0):
         //Ia Cuvantul si GradulRimei si alcatuieste linkul paginii
        RhymePage = "https://dexonline.net/rime-" + Cuvant + "-gradul-" + str(GradulRimei)
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(RhymePage).content)
        
        //Initializeaza arrayul
        Words = []
        
        //Trece prin fiecare coloana
        for Row in range(1, len(Tree.xpath('/html/body/div/div[2]/div/div'))):
            //Trece prin fiecare element
            for Word in range(1, len(Tree.xpath('/html/body/div/div[2]/div/div[' + str(Row) + ']/a/text()')) + 1):
                //Atribuie cuvantul arrayului si scoate parantezele si ghilimelele din text
                Words.append((str(Tree.xpath('/html/body/div/div[2]/div/div[' + str(Row) + ']/a[' + str(Word) + ']/text()')).replace("[",                   "").replace("]", "").replace("'", "")))
                 
                //Verifica daca a fost atins numarul de cuvinte precizat
                if NumarCuvinte != 0 and len(Words) == NumarCuvinte:
                    return Words
        return Words

#------------------------------------------------------------------------#

9. CuvinteSinonim:

  * PARAMETRII:
    Cuvantul
    NumarCuvinte (optional)
    
  * RETURN:
    Un array/list cu toate cuvintele din limba romana/numarul precizat de cuvinte care sunt sinonimele cuvantului
    
  * FUNCTIA:
    def CuvinteSinonim(Cuvant, NumarCuvinte = 0):
        //Ia Cuvantul si alcatuieste linkul paginii
        SynonymousPage = "https://dexonline.net/sinonime-" + Cuvant
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(SynonymousPage).content)
        
        //Ia toate elementele de tip text
        Words = Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/text()')
        
        //Elimina elementele goale
        while (", " in Words):
            Words.remove(", ")
        
        //Elimina virgulele din cuvinte
        for i in range(len(Words)):
            Words[i] = Words[i].replace(", ", "").replace(".", "")
        
        //Nou array cu elementele de tip link
        Words2 = Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/a/text()')

        //Combina arrayurile
        for i in range(len(Words2)):
            Words.append(Words2[i])
        
        //Daca un numar maxim de cuvinte a fost precizat atunci returneaza numai atatea cuvinte
        if NumarCuvinte != 0:
            return Words[:NumarCuvinte]
        else:
            return Words

#------------------------------------------------------------------------#

10. CuvinteAntonim:

  * PARAMETRII:
    Cuvantul
    NumarCuvinte (optional)
    
  * RETURN:
    Un array/list cu toate cuvintele din limba romana/numarul precizat de cuvinte care sunt antonimele cuvantului
    
  * FUNCTIA:
    def CuvinteAntonim(Cuvant, NumarCuvinte = 0):
        //Ia Cuvantul si alcatuieste linkul paginii
        AntonymousPage = "https://dexonline.net/antonime-" + Cuvant
        
        //Ia Tree-ul paginii
        Tree = html.fromstring(requests.get(AntonymousPage).content)
        
        //Ia toate elementele de tip text
        Words = Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/text()')
        
        //Elimina elementele goale
        while (", " in Words):
            Words.remove(", ")
        
        //Elimina virgulele din cuvinte
        for i in range(len(Words)):
            Words[i] = Words[i].replace(", ", "").replace(".", "")
        
        //Nou array cu elementele de tip link
        Words2 = Tree.xpath('/html/body/div/div[2]/div[2]/div/p/i/a/text()')
        
        //Combina arrayurile
        for i in range(len(Words2)):
            Words.append(Words2[i])
        
        //Daca un numar maxim de cuvinte a fost precizat atunci returneaza numai atatea cuvinte
        if NumarCuvinte != 0:
            return Words[:NumarCuvinte]
        else:
            return Words

#------------------------------------------------------------------------#







def DefinitieCuvant(Cuvant, NumarDefinitii = 0,  TipDictionar = 0):
    #Broken af momentan
    WordPage = "https://dexonline.ro/definitie/" + str(Cuvant) + "/expandat"
    Tree = html.fromstring(requests.get(WordPage).content)

    Words = Tree.xpath('/html/body/div[1]/main/div/div/div[1]/div[2]/p/span[1]/text()')
    return "Work in progress"

def DeclinariCuvant():
    return "Work in progress"

def SintezaCuvant():
    return "Work in progress"

#------------------------------------------------------------------------#
def CuvantulZilei(Data = "0"):
    if Data == "0":
        Data = str(datetime.datetime.now())[:10].replace("-", "/")

    WordPage = "https://dexonline.ro/cuvantul-zilei/" + Data
    Tree = html.fromstring(requests.get(WordPage).content)
    Word = unidecode.unidecode(str(Tree.xpath('/html/body/div[1]/main/div/div[2]/div[2]/div[2]/p/span/b[1]/text()')[0]).replace(",", "").lower().replace("è", "s").replace("è", "t").replace("ã", "i"))
    return Word

def CuvantulLunii(Data = "0"):
    if Data == "0":
        Data = str(datetime.datetime.now())[:7].replace("-", "/")

    WordPage = "https://dexonline.ro/cuvantul-lunii/" + Data
    Tree = html.fromstring(requests.get(WordPage).content)
    Word = unidecode.unidecode(str(Tree.xpath('/html/body/div[1]/main/div/div/div[2]/div[2]/p/span/b[1]/text()')[0]).replace(",", "").lower().replace("è", "s").replace("è", "t").replace("ã", "i"))
    return Word

def CuvantAleatoriu():
    CuvantAleatoriu = requests.get('https://dexonline.ro/ajax/randomWord.php')
    return CuvantAleatoriu.text

def ArticolulLunii():
    return "Work in progress"
